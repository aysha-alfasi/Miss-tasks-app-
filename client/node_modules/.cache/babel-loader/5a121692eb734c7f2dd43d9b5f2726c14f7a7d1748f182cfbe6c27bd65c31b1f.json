{"ast":null,"code":"import React,{useState}from\"react\";import\"./App.css\";import NavBar from\"./components/NavBar\";import Header from\"./components/Header\";import Footer from\"./components/Footer\";import TheForm from\"./components/TheForm\";import Modal from\"./components/modal/Modal\";import{AnimatePresence}from\"framer-motion\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[input,setInput]=useState(\"\");const[response,setResponse]=useState(\"\");const[loading,setLoading]=useState(false);const[isModalOpen,setModalOpen]=useState(false);const[showWarning,setShowWarning]=useState(false);const handleSubmit=e=>{e.preventDefault();setLoading(true);analyzeSentiment(input);// <♡ The sentiment analysis function\nsetLoading(true);if(input.trim()===\"\"){setShowWarning(true);}else{setModalOpen(true);setInput(\"\");setShowWarning(false);}};const closeModal=()=>{setInput(\"\");setModalOpen(false);};/* <♡ API response /> */const analyzeSentiment=async text=>{try{const response=await fetch(\"/analyze-sentiment\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({text})// <♡ Send user input as JSON\n});const data=await response.json();// <♡ Parse the JSON response\n// <♡ Handle the sentiment response from the backend />\nsetResponse(data.message);}catch(error){console.error(\"Error:\",error);setResponse(\"There was an error analyzing your sentiment.\");}finally{setLoading(false);// <♡ Stop loading after the response\n}};return/*#__PURE__*/_jsxs(\"div\",{className:\"app\",children:[/*#__PURE__*/_jsx(NavBar,{}),/*#__PURE__*/_jsxs(\"div\",{className:\"fullPageContent\",children:[/*#__PURE__*/_jsx(Header,{}),/*#__PURE__*/_jsx(TheForm,{handleSubmit:handleSubmit,loading:loading,showWarning:showWarning,input:input,setInput:setInput}),/*#__PURE__*/_jsx(AnimatePresence,{children:response&&isModalOpen&&/*#__PURE__*/_jsx(Modal,{onClose:closeModal,response:response,isOpen:isModalOpen})})]}),/*#__PURE__*/_jsx(Footer,{})]});}export default App;","map":{"version":3,"names":["React","useState","NavBar","Header","Footer","TheForm","Modal","AnimatePresence","jsx","_jsx","jsxs","_jsxs","App","input","setInput","response","setResponse","loading","setLoading","isModalOpen","setModalOpen","showWarning","setShowWarning","handleSubmit","e","preventDefault","analyzeSentiment","trim","closeModal","text","fetch","method","headers","body","JSON","stringify","data","json","message","error","console","className","children","onClose","isOpen"],"sources":["C:/Users/alfas/miss-tasks-app/client/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport NavBar from \"./components/NavBar\";\r\nimport Header from \"./components/Header\";\r\nimport Footer from \"./components/Footer\";\r\nimport TheForm from \"./components/TheForm\";\r\nimport Modal from \"./components/modal/Modal\";\r\nimport { AnimatePresence } from \"framer-motion\";\r\n\r\n\r\nfunction App() {\r\n  const [input, setInput] = useState(\"\");\r\n  const [response, setResponse] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  const [isModalOpen, setModalOpen] = useState(false);\r\n  const [showWarning, setShowWarning] = useState(false);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n    analyzeSentiment(input); // <♡ The sentiment analysis function\r\n    setLoading(true);\r\n\r\n    if (input.trim() === \"\") {\r\n      setShowWarning(true);\r\n    } else {\r\n      setModalOpen(true);\r\n      setInput(\"\");\r\n      setShowWarning(false);\r\n    }\r\n\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setInput(\"\");\r\n    setModalOpen(false);\r\n  };\r\n\r\n  /* <♡ API response /> */\r\n  const analyzeSentiment = async (text) => {\r\n    try {\r\n      const response = await fetch(\"/analyze-sentiment\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ text }), // <♡ Send user input as JSON\r\n      });\r\n      const data = await response.json(); // <♡ Parse the JSON response\r\n      // <♡ Handle the sentiment response from the backend />\r\n      setResponse(data.message);\r\n    } catch (error) {\r\n      console.error(\"Error:\", error);\r\n      setResponse(\"There was an error analyzing your sentiment.\");\r\n    } finally {\r\n      setLoading(false); // <♡ Stop loading after the response\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <NavBar />\r\n      <div className=\"fullPageContent\">\r\n      <Header />\r\n      <TheForm\r\n        handleSubmit={handleSubmit}\r\n        loading={loading}\r\n        showWarning={showWarning}\r\n        input={input}\r\n        setInput={setInput}\r\n      />\r\n      <AnimatePresence>\r\n      {response && isModalOpen && (\r\n        <Modal onClose={closeModal} response={response} isOpen={isModalOpen} />\r\n      )}\r\n      </AnimatePresence>\r\n      </div>\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}